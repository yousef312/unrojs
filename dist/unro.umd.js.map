{"version":3,"file":"unro.umd.js","sources":["../src/unro.js"],"sourcesContent":["const algos = ['clearpath', 'insertion', 'lineare'];\r\n\r\nconst dfn = () => { } // dfn stands for Default function\r\nlet counter = 0;\r\nconst clamp = (v, min, max) => v < min ? min : v > max ? max : v;\r\nArray.prototype.insert = function (elm, index) {\r\n    this.splice(clamp(index, 0, this.length), 0, elm);\r\n    return index;\r\n}\r\n\r\n/**\r\n * @typedef {Object} StackDef\r\n * @property {function} undo called when user is attempting to undo action\r\n * @property {function} redo called when user is attempting to redo action\r\n * @property {function} init called to auto create a stack\r\n * @property {CanvasRenderingContext2D} renderer2D attach a ctx to activate the canvas copy/paste feature\r\n * @property {string} label helps identifiy the stack action\r\n * @property {Date} date the stack action date\r\n */\r\n\r\n/**\r\n * Simple integration of undo/redo functionalities\r\n * @author Yousef Neji\r\n */\r\nclass Unro {\r\n    /**\r\n     * The stacks container\r\n     * @type {Array<Stack>}\r\n     */\r\n    #stack = [];\r\n\r\n    /**\r\n     * Last action performed\r\n     * @type {\"undo\" | \"redo\"}\r\n     */\r\n    #last = null;\r\n\r\n    /**\r\n     * Holds a state of whether all stacks are done or not\r\n     * @type {boolean}\r\n     */\r\n    #alldone = false;\r\n\r\n    /**\r\n     * Holds a state of whether all stacks are undone or not\r\n     * @type {boolean}\r\n     */\r\n    #allundone = false;\r\n\r\n    constructor() {\r\n\r\n        /**\r\n         * Current stack/state index \r\n         * @type {number} \r\n         */\r\n        this.current = -1;\r\n\r\n        /**\r\n         * Maximum number of stacks that can be held.\r\n         * @type {number}\r\n         */\r\n        this.maximum = 100;\r\n\r\n        /**\r\n         * The algorithme to use when stacking, or the stacking method, may be one of those:\r\n         *  - `clearpath` : once you undo and push new stack the forward stacks will be removed.\r\n         *  - `insertion` : once you undo and push new stack the new one will be inserted in front of the forward stacks.\r\n         *  - `lineare` : once you push new stack it will be always added to the end of the stacks list.\r\n         * \r\n         * by defaults its `clearpath`\r\n         * @type {string}\r\n         */\r\n        this.algo = \"clearpath\";\r\n    }\r\n\r\n\r\n    get lastAction(){\r\n        return this.#last;\r\n    }\r\n\r\n    get isFirstStack(){\r\n        return this.#allundone === true;\r\n    }\r\n\r\n    get isLastStack(){\r\n        return this.#alldone === true;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Push new stack/state into the stacks list, and directly execute unless\r\n     * you set `dontExecute` as true.\r\n     * @method Unro#push\r\n     * @param {StackDef} stackdef\r\n     * @returns {number} the current state index\r\n     */\r\n    push(stackdef) {\r\n        if (!stackdef || stackdef.toString() !== '[object Object]') return;\r\n        let stack = new Stack(stackdef);\r\n        if (typeof stackdef.init === \"function\") {\r\n            stackdef.init(stack);\r\n\r\n            if (!stack.isReady) throw new Error(`[UnroJS] the .init function not well constructed`);\r\n        } else if (typeof stackdef.undo != \"function\" || typeof stackdef.redo != \"function\")\r\n            throw new Error(`[UnroJS] wrong stack defintion in .push, a stack must have undo & redo or init functions`);\r\n\r\n        // let's prepare the stack state storage\r\n        let oldIndex = this.current;\r\n\r\n        if (this.algo === 'lineare')\r\n            this.current = this.#stack.push(stack) - 1;\r\n        else if (this.algo === 'clearpath') {\r\n            if (this.#stack[oldIndex + 1] !== undefined)\r\n                this.#stack.splice(oldIndex + 1, this.#stack.length);\r\n            this.current = this.#stack.push(stack) - 1;\r\n        } else if (this.algo === 'insertion') {\r\n            this.current = this.#stack.insert(stack, oldIndex + 1);\r\n        }\r\n\r\n        // respect maximum term\r\n        if (this.#stack.length > this.maximum) {\r\n            this.#stack.shift();\r\n            this.current = oldIndex;\r\n        }\r\n\r\n        return this.current;\r\n    }\r\n    /**\r\n     * Undo the last change or state/stack\r\n     * @method Unro#undo\r\n     * @returns {Unro}\r\n     */\r\n    undo() {\r\n        if(this.#allundone) return;\r\n\r\n        this.#stack[this.current].undo(this);\r\n        if (this.#stack[this.current - 1])\r\n            this.current--;\r\n        else this.#allundone = true;\r\n\r\n        this.#last = \"undo\";\r\n        this.#alldone = false;\r\n        return this;\r\n    }\r\n    /**\r\n     * Redo the last change or state/stack\r\n     * @method Unro#redo\r\n     * @returns {Unro}\r\n     */\r\n    redo() {\r\n        if (this.#stack[this.current + 1])\r\n            this.current++;\r\n        else return this.#alldone = true;\r\n        \r\n        this.#stack[this.current].redo(this);\r\n        this.#last = \"redo\";\r\n        this.#allundone = false;\r\n        return this;\r\n    }\r\n    /**\r\n     * Expand the stack maximum length\r\n     * @method Unro#expand\r\n     * @param {number} value\r\n     * @returns {Unro}\r\n     */\r\n    expand(value) {\r\n        this.maximum = typeof value == \"number\" ? value : this.maximum;\r\n        return this\r\n    }\r\n    /**\r\n     * Clear/reset the stack content\r\n     * @method Unro#free\r\n     * @returns {Unro}\r\n     */\r\n    free() {\r\n        this.#stack = [];\r\n        this.current = 0;\r\n        return this\r\n    }\r\n    /**\r\n     * Move to a specified stack, the function will execute all stack up to \r\n     * the one requested, and return either the stack or:\r\n     *  - `out-of-range`: when requested stack index doesn't exists\r\n     *  - `current`: if requested stack is the current one\r\n     * @method Unro#moveTo\r\n     * @param {number} i \r\n     * @returns {string} the wanted stack content or the string `out-of-rang`\r\n     */\r\n    moveTo(i) {\r\n        if (i === this.current) return 'current';\r\n        if (this.#stack[i]) {\r\n            // you can't just jump from age 20 to 55\r\n            // you must go through all between\r\n            // the same happens here\r\n            if (i > this.current)\r\n                for (let j = this.current + 1; j <= i; j++) {\r\n                    this.current = j; // required for state functionality\r\n                    this.#stack[j].redo(this); // redoing the stack\r\n                }\r\n            else\r\n                for (let j = this.current; j >= i; j--) {\r\n                    this.current = j; // required for state functionality\r\n                    this.#stack[j].undo(this); // undoing the stack\r\n                }\r\n\r\n            this.current = i;\r\n            return this.#stack[i];\r\n        } else return 'out-of-range';\r\n    }\r\n    /**\r\n     * Change the `algo` property value, available options are:\r\n     *  - `clearpath` : once you undo and push new stack the forward stacks will be removed.\r\n     *  - `insertion` : once you undo and push new stack the new one will be inserted in front of the forward stacks.\r\n     *  - `lineare` : once you push new stack it will be always added to the end of the stacks list.\r\n     * @method Unro#setAlgorithme\r\n     * @param {string} algo \r\n     * @returns {boolean}\r\n     */\r\n    setAlgorithme(algo) {\r\n        if (algos.includes(algo)) {\r\n            this.algo = algo;\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Creates a JSON stack action string \r\n     * @method Unro#exportStackActions\r\n     * @returns {string}\r\n     */\r\n    exportStackActions() {\r\n        let stacks = [];\r\n        this.#stack.forEach(stk => stacks.push({ action: stk.label, date: stk.date }));\r\n        return JSON.stringify({ stacks });\r\n    }\r\n\r\n    /**\r\n     * Acquire a shortcut library functionality such as qway.js, binding certain pattern as follow:\r\n     *  - `a`: ctrl+z => undo ctrl+y => redo\r\n     *  - `b`: ctrl+z => undo ctrl+shift+z => redo\r\n     * @method Unro#integrate\r\n     * @param {Object} accelLib \r\n     * @param {\"a\" | \"b\"} pattern \r\n     */\r\n    acquire(accelLib, pattern) {\r\n        if (accelLib.bind) {\r\n            let _this = this;\r\n            let undo = 'ctrl+w',\r\n                redo = 'ctrl+y';\r\n            if (pattern == \"b\") {\r\n                undo = 'ctrl+w';\r\n                redo = 'ctrl+shift+y';\r\n            }\r\n\r\n            accelLib.bind(undo, function () {\r\n                _this.undo();\r\n            })\r\n            accelLib.bind(redo, function () {\r\n                _this.redo();\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The length of the current stack\r\n     * @type {number}\r\n     */\r\n    get len() {\r\n        return this.#stack.length;\r\n    }\r\n}\r\n\r\nclass Stack {\r\n    #undo = dfn;\r\n    #redo = dfn;\r\n    /**\r\n     * Provider of render from/to canvas feature\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    #renderer2D = null;\r\n    /**\r\n     * Canvas stack when using render from/to feature\r\n     * @type {Array<CanvasRenderingContext2D>}\r\n     */\r\n    #ctxStack = null;\r\n    #state = null;\r\n    /**\r\n     * Used for canvas copy/paste to check whether the stack is ready or not\r\n     * @type {boolean}\r\n     */\r\n    #ready = false;\r\n    #id = ++counter;\r\n\r\n    /**\r\n     * \r\n     * @param {StackDef} def \r\n     */\r\n    constructor(def) {\r\n        this.#undo = def.undo;\r\n        this.#redo = def.redo;\r\n        this.date = new Date();\r\n        this.label = def.label;\r\n        if (def.renderer2D instanceof CanvasRenderingContext2D) {\r\n            this.#renderer2D = def.renderer2D;\r\n            this.#ctxStack = [];\r\n        }\r\n    }\r\n\r\n    get undo() {\r\n        return this.#undo;\r\n    }\r\n\r\n    get redo() {\r\n        return this.#redo;\r\n    }\r\n\r\n    get isReady() {\r\n        return this.#ready;\r\n    }\r\n\r\n    get id() {\r\n        return this.#id\r\n    }\r\n\r\n    save(data) {\r\n        if (data != undefined)\r\n            this.#state = data;\r\n    }\r\n    load() {\r\n        return this.#state;\r\n    }\r\n    copy() {\r\n        if (!this.#renderer2D)\r\n            throw new Error(`[UnroJS] Define .renderer2D in order to use canvas copy/paste features.`);\r\n\r\n        if (this.#ctxStack.length <= 2) {\r\n            let ctx = new OffscreenCanvas(this.#renderer2D.canvas.width, this.#renderer2D.canvas.height).getContext('2d');\r\n            ctx.drawImage(this.#renderer2D.canvas, 0, 0);\r\n            this.#ctxStack.push(ctx);\r\n\r\n            if (this.#ctxStack.length == 2) {\r\n                this.#ready = true;\r\n                // auto construct\r\n                let oldUndo = this.#undo;\r\n                let oldRedo = this.#redo;\r\n                this.#undo = function () {\r\n                    this.paste('undo');\r\n                    if (typeof oldUndo === \"function\") oldUndo();\r\n                }\r\n                this.#redo = function () {\r\n                    this.paste('redo');\r\n                    if (typeof oldRedo === \"function\") oldRedo();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    paste(step) {\r\n        if (!this.#renderer2D)\r\n            throw new Error(`[UnroJS] Define .renderer2D in order to use canvas copy/paste features.`);\r\n\r\n        // getting canvas stack\r\n        let ctx = this.#ctxStack[[1, \"undo\"].includes(step) ? 0 : [2, \"redo\"].includes(step) ? 1 : -1];\r\n        if (!ctx) throw new Error(`[UnroJS] Unknown \"step\" in .paste \"${step}\"`);\r\n        // displaying it\r\n        this.#renderer2D.clearRect(0, 0, this.#renderer2D.canvas.width, this.#renderer2D.canvas.height);\r\n        this.#renderer2D.drawImage(ctx.canvas, 0, 0);\r\n    }\r\n}\r\n\r\n\r\nfunction unro() {\r\n    return new Unro();\r\n}\r\n\r\nwindow.unro = unro;\r\nexport default unro;"],"names":[],"mappings":"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"}