{"version":3,"file":"unro.umd.min.js","sources":["../src/unro.js"],"sourcesContent":["const algos = ['clearpath', 'insertion', 'lineare'];\r\n\r\nconst dfn = () => { } // dfn stands for Default function\r\nlet counter = 0;\r\nconst clamp = (v, min, max) => v < min ? min : v > max ? max : v;\r\nArray.prototype.insert = function (elm, index) {\r\n    this.splice(clamp(index, 0, this.length), 0, elm);\r\n    return index;\r\n}\r\n\r\n/**\r\n * @typedef {Object} StackDef\r\n * @property {function} undo called when user is attempting to undo action\r\n * @property {function} redo called when user is attempting to redo action\r\n * @property {function} init called to auto create a stack\r\n * @property {CanvasRenderingContext2D} renderer2D attach a ctx to activate the canvas copy/paste feature\r\n * @property {string} label helps identifiy the stack action\r\n * @property {Date} date the stack action date\r\n */\r\n\r\n/**\r\n * Simple integration of undo/redo functionalities\r\n * @author Yousef Neji\r\n */\r\nclass Unro {\r\n    /**\r\n     * The stacks container\r\n     * @type {Array<Stack>}\r\n     */\r\n    #stack = [];\r\n\r\n    constructor(max, algo) {\r\n\r\n        /**\r\n         * Current stack/state index \r\n         * @type {number} \r\n         */\r\n        this.current = -1;\r\n\r\n        /**\r\n         * Maximum number of stacks that can be held.\r\n         * @type {number}\r\n         */\r\n        this.maximum = typeof max === \"number\" ? max : 100;\r\n\r\n        /**\r\n         * The algorithme to use when stacking, or the stacking method, may be one of those:\r\n         *  - `clearpath` : once you undo and push new stack the forward stacks will be removed.\r\n         *  - `insertion` : once you undo and push new stack the new one will be inserted in front of the forward stacks.\r\n         *  - `lineare` : once you push new stack it will be always added to the end of the stacks list.\r\n         * \r\n         * by defaults its `clearpath`\r\n         * @type {string}\r\n         */\r\n        this.algo = algos.includes(algo) ? algo : \"clearpath\";\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Push new stack/state into the stacks list, and directly execute unless\r\n     * you set `dontExecute` as true.\r\n     * @method Unro#push\r\n     * @param {StackDef} stackdef\r\n     * @returns {number} the current state index\r\n     */\r\n    push(stackdef) {\r\n        if (!stackdef || stackdef.toString() !== '[object Object]') return;\r\n        let stack = new Stack(stackdef);\r\n        if (typeof stackdef.init === \"function\") {\r\n            stackdef.init(stack);\r\n\r\n            if (!stack.isReady) throw new Error(`[UnroJS] the .init function not well constructed`);\r\n        } else if (typeof stackdef.undo != \"function\" || typeof stackdef.redo != \"function\")\r\n            throw new Error(`[UnroJS] wrong stack defintion in .push, a stack must have undo & redo or init functions`);\r\n\r\n        // let's prepare the stack state storage\r\n        let oldIndex = this.current;\r\n\r\n        if (this.algo === 'lineare')\r\n            this.current = this.#stack.push(stack) - 1;\r\n        else if (this.algo === 'clearpath') {\r\n            if (this.#stack[oldIndex + 1] !== undefined)\r\n                this.#stack.splice(oldIndex + 1, this.#stack.length);\r\n            this.current = this.#stack.push(stack) - 1;\r\n        } else if (this.algo === 'insertion') {\r\n            this.current = this.#stack.insert(stack, oldIndex + 1);\r\n        }\r\n\r\n        // respect maximum term\r\n        if (this.#stack.length > this.maximum) {\r\n            this.#stack.shift();\r\n            this.current = oldIndex;\r\n        }\r\n\r\n        return this.current;\r\n    }\r\n    /**\r\n     * Undo the last change or state/stack\r\n     * @method Unro#undo\r\n     * @returns {Unro}\r\n     */\r\n    undo() {\r\n        this.#stack[this.current].undo(this);\r\n        if (this.#stack[this.current - 1])\r\n            this.current--;\r\n        return this;\r\n    }\r\n    /**\r\n     * Redo the last change or state/stack\r\n     * @method Unro#redo\r\n     * @returns {Unro}\r\n     */\r\n    redo() {\r\n        this.#stack[this.current].redo(this);\r\n        if (this.#stack[this.current + 1])\r\n            this.current++;\r\n        return this;\r\n    }\r\n    /**\r\n     * Expand the stack maximum length\r\n     * @method Unro#expand\r\n     * @param {number} value\r\n     * @returns {Unro}\r\n     */\r\n    expand(value) {\r\n        this.maximum = typeof value == \"number\" ? value : this.maximum;\r\n        return this\r\n    }\r\n    /**\r\n     * Clear/reset the stack content\r\n     * @method Unro#free\r\n     * @returns {Unro}\r\n     */\r\n    free() {\r\n        this.#stack = [];\r\n        this.current = 0;\r\n        return this\r\n    }\r\n    /**\r\n     * Move to a specified stack, the function will execute all stack up to \r\n     * the one requested, and return either the stack or:\r\n     *  - `out-of-range`: when requested stack index doesn't exists\r\n     *  - `current`: if requested stack is the current one\r\n     * @method Unro#moveTo\r\n     * @param {number} i \r\n     * @returns {string} the wanted stack content or the string `out-of-rang`\r\n     */\r\n    moveTo(i) {\r\n        if (i === this.current) return 'current';\r\n        if (this.#stack[i]) {\r\n            // you can't just jump from age 20 to 55\r\n            // you must go through all between\r\n            // the same happens here\r\n            if (i > this.current)\r\n                for (let j = this.current + 1; j <= i; j++) {\r\n                    this.current = j; // required for state functionality\r\n                    this.#stack[j].redo(this); // redoing the stack\r\n                }\r\n            else\r\n                for (let j = this.current; j >= i; j--) {\r\n                    this.current = j; // required for state functionality\r\n                    this.#stack[j].undo(this); // undoing the stack\r\n                }\r\n\r\n            this.current = i;\r\n            return this.#stack[i];\r\n        } else return 'out-of-range';\r\n    }\r\n    /**\r\n     * Change the `algo` property value, available options are:\r\n     *  - `clearpath` : once you undo and push new stack the forward stacks will be removed.\r\n     *  - `insertion` : once you undo and push new stack the new one will be inserted in front of the forward stacks.\r\n     *  - `lineare` : once you push new stack it will be always added to the end of the stacks list.\r\n     * @method Unro#setAlgorithme\r\n     * @param {string} algo \r\n     * @returns {boolean}\r\n     */\r\n    setAlgorithme(algo) {\r\n        if (algos.includes(algo)) {\r\n            this.algo = algo;\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Creates a JSON stack action string \r\n     * @method Unro#exportStackActions\r\n     * @returns {string}\r\n     */\r\n    exportStackActions() {\r\n        let stacks = [];\r\n        this.#stack.forEach(stk => stacks.push({ action: stk.label, date: stk.date }));\r\n        return JSON.stringify({ stacks });\r\n    }\r\n\r\n    /**\r\n     * Acquire a shortcut library functionality such as qway.js, binding certain pattern as follow:\r\n     *  - `a`: ctrl+z => undo ctrl+y => redo\r\n     *  - `b`: ctrl+z => undo ctrl+shift+z => redo\r\n     * @method Unro#integrate\r\n     * @param {Object} accelLib \r\n     * @param {\"a\" | \"b\"} pattern \r\n     */\r\n    acquire(accelLib, pattern) {\r\n        if (accelLib.bind) {\r\n            let _this = this;\r\n            let undo = 'ctrl+w',\r\n                redo = 'ctrl+y';\r\n            if (pattern == \"b\") {\r\n                undo = 'ctrl+w';\r\n                redo = 'ctrl+shift+y';\r\n            }\r\n\r\n            accelLib.bind(undo, function () {\r\n                _this.undo();\r\n            })\r\n            accelLib.bind(redo, function () {\r\n                _this.redo();\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The length of the current stack\r\n     * @type {number}\r\n     */\r\n    get len() {\r\n        return this.#stack.length;\r\n    }\r\n}\r\n\r\nclass Stack {\r\n    #undo = dfn;\r\n    #redo = dfn;\r\n    /**\r\n     * Provider of render from/to canvas feature\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    #renderer2D = null;\r\n    /**\r\n     * Canvas stack when using render from/to feature\r\n     * @type {Array<CanvasRenderingContext2D>}\r\n     */\r\n    #ctxStack = null;\r\n    #state = null;\r\n    /**\r\n     * Used for canvas copy/paste to check whether the stack is ready or not\r\n     * @type {boolean}\r\n     */\r\n    #ready = false;\r\n    #id = ++counter;\r\n\r\n    /**\r\n     * \r\n     * @param {StackDef} def \r\n     */\r\n    constructor(def) {\r\n        this.#undo = def.undo;\r\n        this.#redo = def.redo;\r\n        this.date = new Date();\r\n        this.label = def.label;\r\n        if (def.renderer2D instanceof CanvasRenderingContext2D) {\r\n            this.#renderer2D = def.renderer2D;\r\n            this.#ctxStack = [];\r\n        }\r\n    }\r\n\r\n    get undo() {\r\n        return this.#undo;\r\n    }\r\n\r\n    get redo() {\r\n        return this.#redo;\r\n    }\r\n\r\n    get isReady() {\r\n        return this.#ready;\r\n    }\r\n\r\n    get id() {\r\n        return this.#id\r\n    }\r\n\r\n    save(data) {\r\n        if (data != undefined)\r\n            this.#state = data;\r\n    }\r\n    load() {\r\n        return this.#state;\r\n    }\r\n    copy() {\r\n        if (!this.#renderer2D)\r\n            throw new Error(`[UnroJS] Define .renderer2D in order to use canvas copy/paste features.`);\r\n\r\n        if (this.#ctxStack.length <= 2) {\r\n            let ctx = new OffscreenCanvas(this.#renderer2D.canvas.width, this.#renderer2D.canvas.height).getContext('2d');\r\n            ctx.drawImage(this.#renderer2D.canvas, 0, 0);\r\n            this.#ctxStack.push(ctx);\r\n\r\n            if (this.#ctxStack.length == 2) {\r\n                this.#ready = true;\r\n                // auto construct\r\n                let oldUndo = this.#undo;\r\n                let oldRedo = this.#redo;\r\n                this.#undo = function () {\r\n                    this.paste('undo');\r\n                    if (typeof oldUndo === \"function\") oldUndo();\r\n                }\r\n                this.#redo = function () {\r\n                    this.paste('redo');\r\n                    if (typeof oldRedo === \"function\") oldRedo();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    paste(step) {\r\n        if (!this.#renderer2D)\r\n            throw new Error(`[UnroJS] Define .renderer2D in order to use canvas copy/paste features.`);\r\n\r\n        // getting canvas stack\r\n        let ctx = this.#ctxStack[[1, \"undo\"].includes(step) ? 0 : [2, \"redo\"].includes(step) ? 1 : -1];\r\n        if (!ctx) throw new Error(`[UnroJS] Unknown \"step\" in .paste \"${step}\"`);\r\n        // displaying it\r\n        this.#renderer2D.clearRect(0, 0, this.#renderer2D.canvas.width, this.#renderer2D.canvas.height);\r\n        this.#renderer2D.drawImage(ctx.canvas, 0, 0);\r\n    }\r\n}\r\n\r\nconst unro = new Unro();\r\n\r\nwindow.Unro = unro;\r\nexport default unro;"],"names":["algos","dfn","counter","Array","prototype","insert","elm","index","v","min","max","this","splice","length","Stack","undo","redo","renderer2D","ctxStack","state","ready","id","constructor","def","date","Date","label","CanvasRenderingContext2D","isReady","save","data","undefined","load","copy","Error","ctx","OffscreenCanvas","canvas","width","height","getContext","drawImage","push","oldUndo","oldRedo","paste","step","includes","clearRect","unro","stack","algo","current","maximum","stackdef","toString","init","oldIndex","shift","expand","value","free","moveTo","i","j","setAlgorithme","exportStackActions","stacks","forEach","stk","action","JSON","stringify","acquire","accelLib","pattern","bind","_this","len","window","Unro"],"mappings":"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"}