{"version":3,"file":"unro.umd.min.js","sources":["../src/unro.js"],"sourcesContent":["const algos = ['clearpath', 'insertion', 'lineare'];\r\n\r\nconst dfn = () => { } // dfn stands for Default function\r\nlet counter = 0;\r\nconst clamp = (v, min, max) => v < min ? min : v > max ? max : v;\r\nArray.prototype.insert = function (elm, index) {\r\n    this.splice(clamp(index, 0, this.length), 0, elm);\r\n    return index;\r\n}\r\n\r\n/**\r\n * @typedef {Object} StackDef\r\n * @property {function} undo called when user is attempting to undo action\r\n * @property {function} redo called when user is attempting to redo action\r\n * @property {function} init called to auto create a stack\r\n * @property {CanvasRenderingContext2D} renderer2D attach a ctx to activate the canvas copy/paste feature\r\n * @property {string} label helps identifiy the stack action\r\n * @property {Date} date the stack action date\r\n */\r\n\r\n/**\r\n * Simple integration of undo/redo functionalities\r\n * @author Yousef Neji\r\n */\r\nclass Unro {\r\n    /**\r\n     * The stacks container\r\n     * @type {Array<Stack>}\r\n     */\r\n    #stack = [];\r\n\r\n    /**\r\n     * Last action performed\r\n     * @type {\"undo\" | \"redo\"}\r\n     */\r\n    #last = null;\r\n\r\n    /**\r\n     * Direction is important for stability and overall library functioning,\r\n     * here It's define by 1 as to go forward \"redo\" and 0 for backward \"undo\"\r\n     * @type {number}\r\n     */\r\n    #dir = 0;\r\n\r\n    constructor() {\r\n\r\n        /**\r\n         * Current stack/state index \r\n         * @type {number} \r\n         */\r\n        this.current = -1;\r\n\r\n        /**\r\n         * Maximum number of stacks that can be held.\r\n         * @type {number}\r\n         */\r\n        this.maximum = 100;\r\n\r\n        /**\r\n         * The algorithme to use when stacking, or the stacking method, may be one of those:\r\n         *  - `clearpath` : once you undo and push new stack the forward stacks will be removed.\r\n         *  - `insertion` : once you undo and push new stack the new one will be inserted in front of the forward stacks.\r\n         *  - `lineare` : once you push new stack it will be always added to the end of the stacks list.\r\n         * \r\n         * by defaults its `clearpath`\r\n         * @type {string}\r\n         */\r\n        this.algo = \"clearpath\";\r\n    }\r\n\r\n\r\n    get lastAction(){\r\n        return this.#last;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Push new stack/state into the stacks list, and directly execute unless\r\n     * you set `dontExecute` as true.\r\n     * @method Unro#push\r\n     * @param {StackDef} stackdef\r\n     * @returns {number} the current state index\r\n     */\r\n    push(stackdef) {\r\n        if (!stackdef || stackdef.toString() !== '[object Object]') return;\r\n        let stack = new Stack(stackdef);\r\n        if (typeof stackdef.init === \"function\") {\r\n            stackdef.init(stack);\r\n\r\n            if (!stack.isReady) throw new Error(`[UnroJS] the .init function not well constructed`);\r\n        } else if (typeof stackdef.undo != \"function\" || typeof stackdef.redo != \"function\")\r\n            throw new Error(`[UnroJS] wrong stack defintion in .push, a stack must have undo & redo or init functions`);\r\n\r\n        // let's prepare the stack state storage\r\n        let oldIndex = this.current;\r\n\r\n        if (this.algo === 'lineare')\r\n            this.current = this.#stack.push(stack) - 1;\r\n        else if (this.algo === 'clearpath') {\r\n            if (this.#stack[oldIndex + 1] !== undefined)\r\n                this.#stack.splice(oldIndex + 1, this.#stack.length);\r\n            this.current = this.#stack.push(stack) - 1;\r\n        } else if (this.algo === 'insertion') {\r\n            this.current = this.#stack.insert(stack, oldIndex + 1);\r\n        }\r\n\r\n        // respect maximum term\r\n        if (this.#stack.length > this.maximum) {\r\n            this.#stack.shift();\r\n            this.current = oldIndex;\r\n        }\r\n\r\n        this.#dir = 0;\r\n        return this.current;\r\n    }\r\n    /**\r\n     * Undo the last change or state/stack\r\n     * @method Unro#undo\r\n     * @returns {Unro}\r\n     */\r\n    undo() {\r\n        this.#stack[this.current].undo(this);\r\n        if (this.#stack[this.current - 1])\r\n            this.current--;\r\n\r\n        this.#last = \"undo\";\r\n        return this;\r\n    }\r\n    /**\r\n     * Redo the last change or state/stack\r\n     * @method Unro#redo\r\n     * @returns {Unro}\r\n     */\r\n    redo() {\r\n        if (this.#stack[this.current + 1])\r\n            this.current++;\r\n        \r\n        this.#stack[this.current].redo(this);\r\n        this.#last = \"redo\";\r\n        return this;\r\n    }\r\n    /**\r\n     * Expand the stack maximum length\r\n     * @method Unro#expand\r\n     * @param {number} value\r\n     * @returns {Unro}\r\n     */\r\n    expand(value) {\r\n        this.maximum = typeof value == \"number\" ? value : this.maximum;\r\n        return this\r\n    }\r\n    /**\r\n     * Clear/reset the stack content\r\n     * @method Unro#free\r\n     * @returns {Unro}\r\n     */\r\n    free() {\r\n        this.#stack = [];\r\n        this.current = 0;\r\n        return this\r\n    }\r\n    /**\r\n     * Move to a specified stack, the function will execute all stack up to \r\n     * the one requested, and return either the stack or:\r\n     *  - `out-of-range`: when requested stack index doesn't exists\r\n     *  - `current`: if requested stack is the current one\r\n     * @method Unro#moveTo\r\n     * @param {number} i \r\n     * @returns {string} the wanted stack content or the string `out-of-rang`\r\n     */\r\n    moveTo(i) {\r\n        if (i === this.current) return 'current';\r\n        if (this.#stack[i]) {\r\n            // you can't just jump from age 20 to 55\r\n            // you must go through all between\r\n            // the same happens here\r\n            if (i > this.current)\r\n                for (let j = this.current + 1; j <= i; j++) {\r\n                    this.current = j; // required for state functionality\r\n                    this.#stack[j].redo(this); // redoing the stack\r\n                }\r\n            else\r\n                for (let j = this.current; j >= i; j--) {\r\n                    this.current = j; // required for state functionality\r\n                    this.#stack[j].undo(this); // undoing the stack\r\n                }\r\n\r\n            this.current = i;\r\n            return this.#stack[i];\r\n        } else return 'out-of-range';\r\n    }\r\n    /**\r\n     * Change the `algo` property value, available options are:\r\n     *  - `clearpath` : once you undo and push new stack the forward stacks will be removed.\r\n     *  - `insertion` : once you undo and push new stack the new one will be inserted in front of the forward stacks.\r\n     *  - `lineare` : once you push new stack it will be always added to the end of the stacks list.\r\n     * @method Unro#setAlgorithme\r\n     * @param {string} algo \r\n     * @returns {boolean}\r\n     */\r\n    setAlgorithme(algo) {\r\n        if (algos.includes(algo)) {\r\n            this.algo = algo;\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Creates a JSON stack action string \r\n     * @method Unro#exportStackActions\r\n     * @returns {string}\r\n     */\r\n    exportStackActions() {\r\n        let stacks = [];\r\n        this.#stack.forEach(stk => stacks.push({ action: stk.label, date: stk.date }));\r\n        return JSON.stringify({ stacks });\r\n    }\r\n\r\n    /**\r\n     * Acquire a shortcut library functionality such as qway.js, binding certain pattern as follow:\r\n     *  - `a`: ctrl+z => undo ctrl+y => redo\r\n     *  - `b`: ctrl+z => undo ctrl+shift+z => redo\r\n     * @method Unro#integrate\r\n     * @param {Object} accelLib \r\n     * @param {\"a\" | \"b\"} pattern \r\n     */\r\n    acquire(accelLib, pattern) {\r\n        if (accelLib.bind) {\r\n            let _this = this;\r\n            let undo = 'ctrl+w',\r\n                redo = 'ctrl+y';\r\n            if (pattern == \"b\") {\r\n                undo = 'ctrl+w';\r\n                redo = 'ctrl+shift+y';\r\n            }\r\n\r\n            accelLib.bind(undo, function () {\r\n                _this.undo();\r\n            })\r\n            accelLib.bind(redo, function () {\r\n                _this.redo();\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The length of the current stack\r\n     * @type {number}\r\n     */\r\n    get len() {\r\n        return this.#stack.length;\r\n    }\r\n}\r\n\r\nclass Stack {\r\n    #undo = dfn;\r\n    #redo = dfn;\r\n    /**\r\n     * Provider of render from/to canvas feature\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    #renderer2D = null;\r\n    /**\r\n     * Canvas stack when using render from/to feature\r\n     * @type {Array<CanvasRenderingContext2D>}\r\n     */\r\n    #ctxStack = null;\r\n    #state = null;\r\n    /**\r\n     * Used for canvas copy/paste to check whether the stack is ready or not\r\n     * @type {boolean}\r\n     */\r\n    #ready = false;\r\n    #id = ++counter;\r\n\r\n    /**\r\n     * \r\n     * @param {StackDef} def \r\n     */\r\n    constructor(def) {\r\n        this.#undo = def.undo;\r\n        this.#redo = def.redo;\r\n        this.date = new Date();\r\n        this.label = def.label;\r\n        if (def.renderer2D instanceof CanvasRenderingContext2D) {\r\n            this.#renderer2D = def.renderer2D;\r\n            this.#ctxStack = [];\r\n        }\r\n    }\r\n\r\n    get undo() {\r\n        return this.#undo;\r\n    }\r\n\r\n    get redo() {\r\n        return this.#redo;\r\n    }\r\n\r\n    get isReady() {\r\n        return this.#ready;\r\n    }\r\n\r\n    get id() {\r\n        return this.#id\r\n    }\r\n\r\n    save(data) {\r\n        if (data != undefined)\r\n            this.#state = data;\r\n    }\r\n    load() {\r\n        return this.#state;\r\n    }\r\n    copy() {\r\n        if (!this.#renderer2D)\r\n            throw new Error(`[UnroJS] Define .renderer2D in order to use canvas copy/paste features.`);\r\n\r\n        if (this.#ctxStack.length <= 2) {\r\n            let ctx = new OffscreenCanvas(this.#renderer2D.canvas.width, this.#renderer2D.canvas.height).getContext('2d');\r\n            ctx.drawImage(this.#renderer2D.canvas, 0, 0);\r\n            this.#ctxStack.push(ctx);\r\n\r\n            if (this.#ctxStack.length == 2) {\r\n                this.#ready = true;\r\n                // auto construct\r\n                let oldUndo = this.#undo;\r\n                let oldRedo = this.#redo;\r\n                this.#undo = function () {\r\n                    this.paste('undo');\r\n                    if (typeof oldUndo === \"function\") oldUndo();\r\n                }\r\n                this.#redo = function () {\r\n                    this.paste('redo');\r\n                    if (typeof oldRedo === \"function\") oldRedo();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    paste(step) {\r\n        if (!this.#renderer2D)\r\n            throw new Error(`[UnroJS] Define .renderer2D in order to use canvas copy/paste features.`);\r\n\r\n        // getting canvas stack\r\n        let ctx = this.#ctxStack[[1, \"undo\"].includes(step) ? 0 : [2, \"redo\"].includes(step) ? 1 : -1];\r\n        if (!ctx) throw new Error(`[UnroJS] Unknown \"step\" in .paste \"${step}\"`);\r\n        // displaying it\r\n        this.#renderer2D.clearRect(0, 0, this.#renderer2D.canvas.width, this.#renderer2D.canvas.height);\r\n        this.#renderer2D.drawImage(ctx.canvas, 0, 0);\r\n    }\r\n}\r\n\r\n\r\nfunction unro() {\r\n    return new Unro();\r\n}\r\n\r\nwindow.unro = unro;\r\nexport default unro;"],"names":["algos","dfn","counter","Array","prototype","insert","elm","index","v","min","max","this","splice","length","Unro","stack","last","dir","constructor","current","maximum","algo","lastAction","push","stackdef","toString","Stack","init","isReady","Error","undo","redo","oldIndex","undefined","shift","expand","value","free","moveTo","i","j","setAlgorithme","includes","exportStackActions","stacks","forEach","stk","action","label","date","JSON","stringify","acquire","accelLib","pattern","bind","_this","len","renderer2D","ctxStack","state","ready","id","def","Date","CanvasRenderingContext2D","save","data","load","copy","ctx","OffscreenCanvas","canvas","width","height","getContext","drawImage","oldUndo","oldRedo","paste","step","clearRect","unro","window"],"mappings":"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"}